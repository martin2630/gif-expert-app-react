{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGif.js","GifExpertApp.js","reportWebVitals.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","onChange","target","value","placeholder","getGif","category","a","url","encodeURI","fetch","resp","json","data","console","log","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGif","GifExpertApp","categories","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"2MAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAGVC,mBADV,IAFoB,mBAGvCC,EAHuC,KAG3BC,EAH2B,KAkB9C,OACI,sBAAMC,SAVW,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAO,IACzBR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAXkB,MAiBtB,SACI,uBAAOO,KAAK,OAAOC,SAfD,SAACN,GACvBF,EAAcE,EAAEO,OAAOC,QAc6BA,MAAOX,EAAYY,YAAY,qB,+BCrB9EC,EAAM,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,4DACD,mCACXC,EAFY,iDAEoCC,UAAUH,GAF9C,4BACD,oCADC,SAGCI,MAAMF,GAHP,cAGZG,EAHY,gBAIKA,EAAKC,OAJV,uBAIVC,EAJU,EAIVA,KACRC,QAAQC,IAAIF,GACNG,EAAOH,EAAKI,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXZ,IAAG,UAAEU,EAAIG,cAAN,aAAE,EAAYC,iBAAiBd,QAVxB,kBAaXQ,GAbW,4CAAH,sDCANO,EAAc,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOZ,EAAS,EAATA,IACpC,OACI,sBAAKgB,UAAU,yCAAf,UACI,qBAAKC,IAAMjB,EAAMkB,IAAMN,IACvB,4BAAIA,QCFHO,EAAU,SAAC,GAAgB,IAAfrB,EAAc,EAAdA,SAAc,ECDZ,SAACA,GAAc,IAAD,EAEXf,mBAAS,CAC/BsB,KAAM,GACNe,SAAS,IAJwB,mBAE9BC,EAF8B,KAEvBC,EAFuB,KAiBrC,OAVAC,qBAAW,WACP1B,EAAOC,GACF0B,MAAM,SAAAC,GACHH,EAAS,CACLjB,KAAMoB,EACNL,SAAS,SAGtB,CAAEtB,IAEEuB,EDf0BK,CAAa5B,GAAjCe,EADsB,EAC3BR,KAAae,EADc,EACdA,QAErB,OACI,qCACI,qBAAIJ,UAAU,kBAAd,cAAmClB,EAAnC,OAEEsB,GAAW,mBAAGJ,UAAU,mCAAb,qBAEb,qBAAKA,UAAU,YAAf,SAGQH,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAESA,GADCA,EAAIC,aEdzBgB,EAAe,WAGxB,IAH8B,EAIM5C,mBADV,CAAC,cAHG,mBAIvB6C,EAJuB,KAIX9C,EAJW,KAM9B,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,8BAEQ8C,EAAWnB,KAAK,SAAAX,GAAQ,OAChB,cAAC,EAAD,CAEIA,SAAUA,GADLA,YCPtB+B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBP,MAAK,YAAkD,IAA/CQ,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.39985fdf.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({ setCategories }) => {\n    // const [{setCategories}] = this.props;\n    const initialInputValue = ''\n    const [inputValue, setInputValue] = useState(initialInputValue);\n\n    const handleInputChange = (e) => {\n        setInputValue(e.target.value)\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if (inputValue.trim().length>2){\n            setCategories(cats => [inputValue, ...cats])\n            setInputValue(initialInputValue)\n        }\n        return \n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <input type=\"text\" onChange={handleInputChange} value={inputValue} placeholder=\"Ricky y morty\"/>\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n","\n\nexport const getGif = async (category) => {\n    const apiToken = \"lJaWXVyFjxKS9SNZ4zX9F46Z9eZqsDGc\"\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=3&api_key=${apiToken}`;\n    const resp = await fetch(url);\n    const { data } = await resp.json();\n    console.log(data);\n    const gifs = data.map( img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n    return gifs;\n}","import React from 'react'\n\nexport const GifGridItem = ({id, title, url}) => {\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src={ url } alt={ title } />\n            <p>{title}</p>\n        </div>\n    )\n}\n","import React from 'react';\nimport { useFetchGif } from '../hooks/useFetchGif';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({category}) => {\n    const { data:images, loading } = useFetchGif( category );\n\n    return (\n        <>\n            <h3 className=\"animate__fadeIn\"> { category } </h3>\n\n            { loading && <p className=\"animate__animated animate__flash\">Loading</p> }\n\n            <div className=\"card-grid\">\n                \n                {\n                    images.map( img => (\n                        <GifGridItem \n                            key={ img.id }\n                            { ...img }\n                        />\n                    ))\n                }\n            \n            </div>\n        </>\n    )\n}\n","import { useState, useEffect} from 'react';\nimport { getGif } from '../helpers/getGifs';\n\nexport const useFetchGif = (category) => {\n\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    })\n\n    useEffect( () => {\n        getGif(category)\n            .then( imgs =>{\n                setState({\n                    data: imgs,\n                    loading: false\n                })\n            })\n    }, [ category ])\n\n    return state\n}\n","import React, { useState } from 'react'\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nexport const GifExpertApp = () => {\n\n    // const categories = [\"one punch\", \"pokemon\", \"christmans\"];\n    const initialCategories = [\"one punch\"]\n    const [categories, setCategories] = useState(initialCategories);\n\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={setCategories} />\n            <hr></hr>\n            <div>\n                {\n                    categories.map( category => (\n                            <GifGrid \n                                key={category}\n                                category={category}\n                            />\n                        )\n                    )\n                }\n            </div>\n        </>\n    )\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { GifExpertApp } from './GifExpertApp';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}